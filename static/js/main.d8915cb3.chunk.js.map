{"version":3,"sources":["components/main.module.css","actionTypes/chat.js","actions/chat.js","components/Header/Header.js","components/Header/index.js","containers/Chat.js","App.js","reducers/chat.js","reducers/allReducers.js","index.js"],"names":["module","exports","ON_CHAT_MESSAGES_RECEIVED","ON_CHAT_ONLINE","ON_CHAT_OFFLINE","onChatMessagesReceived","data","type","payload","onChatOnline","paload","onChatOffline","inputRef","onNameChange","isOnline","className","onChange","ref","Header","props","React","createRef","getNameFromLocalStorage","bind","this","userName","getUserNameFromLocalStorage","current","value","localStorage","setItem","Component","connect","state","shared","Chat","userNameRef","document","addEventListener","Notification","permission","requestPermission","alert","startSocket","socket","WebSocket","onmessage","event","message","JSON","parse","hidden","from","body","notifyMe","length","onclose","setTimeout","scrollToBottom","getItem","messagesEnd","scrollIntoView","mes","send","stringify","styles","fullscreen","headerClass","chat","isChatOnline","wrapmessages","messages","id","headerMessages","map","el","timeFormat","Date","time","toTimeString","replace","messageContainer","messageFirstLine","messageFrom","messageTime","messageSecondLine","style","float","clear","messageBottom","onKeyPress","e","key","sendMessageToServer","dispatch","App","initialState","allReducers","combineReducers","action","newState","concat","reverse","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d8915cb3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"myClass\":\"main_myClass__3scNW\",\"height100\":\"main_height100__PXynQ\",\"fullscreen\":\"main_fullscreen__t04o9\",\"headerClass\":\"main_headerClass__1v026\",\"mainMessage\":\"main_mainMessage__2XxD6\",\"messages\":\"main_messages__1uxfq\",\"wrapmessages\":\"main_wrapmessages__2CHMz\",\"headerMessages\":\"main_headerMessages__1UnnY\",\"messageBottom\":\"main_messageBottom__3OCaN\",\"messageContainer\":\"main_messageContainer__UoPYj\",\"messageFirstLine\":\"main_messageFirstLine__33Hn3\",\"messageFrom\":\"main_messageFrom__35Csh\",\"messageTime\":\"main_messageTime__2nse-\",\"messageSecondLine\":\"main_messageSecondLine__2gPw5\"};","export const ON_CHAT_MESSAGES_RECEIVED = 'ON_CHAT_MESSAGES_RECEIVED';\nexport const ON_CHAT_ONLINE = 'ON_CHAT_ONLINE';\nexport const ON_CHAT_OFFLINE = 'ON_CHAT_OFFLINE';\n","import { ON_CHAT_MESSAGES_RECEIVED, ON_CHAT_ONLINE, ON_CHAT_OFFLINE} from '../actionTypes/chat';\n\nexport const onChatMessagesReceived = (data) => ({\n  type: ON_CHAT_MESSAGES_RECEIVED,\n  payload: data,\n});\n\nexport const onChatOnline = (data) => ({\n  type: ON_CHAT_ONLINE,\n  paload: data,\n});\n\nexport const onChatOffline = (data) => ({\n  type: ON_CHAT_OFFLINE,\n  paload: data,\n});\n","import React from 'react';\n\nexport default ({inputRef, onNameChange, isOnline}) => {\n\n  return (\n    <div className=\"header\">\n      <div>\n        {isOnline ? <span>***ONLINE***</span> : <span>***WARNING!! OFFLINE***    </span>}\n        <span>YOUR NAME:</span>\n        <input\n          type=\"text\"\n          onChange={() => {\n            onNameChange();\n          }}\n          ref={inputRef}\n        />\n      </div>\n    </div>\n  );\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport HeaderComponent from './Header';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n\n    //\n    this.getNameFromLocalStorage = this.getNameFromLocalStorage.bind(this);\n    this.onNameChange = this.onNameChange.bind(this);\n  }\n\n\n  componentDidMount() {\n    this.getNameFromLocalStorage();\n  }\n\n  // getNameFromLocalStorage = () => {\n  //   const userName = this.props.getUserNameFromLocalStorage();\n  //   this.inputRef.current.value = userName;\n  // }\n  getNameFromLocalStorage() {\n    const userName = this.props.getUserNameFromLocalStorage();\n    this.inputRef.current.value = userName;\n  }\n\n\n  // onNameChange = () => {\n  //   localStorage.setItem('userName', this.inputRef.current.value);\n  // }\n  onNameChange() {\n    localStorage.setItem('userName', this.inputRef.current.value);\n  }\n\n  render() {\n    return (\n      <HeaderComponent\n        onNameChange={this.onNameChange}\n        inputRef={this.inputRef}\n        {...this.props}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = (state) => ({\n  shared: state.shared,\n});\n\nconst mapDispatchToProps = () => ({\n\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport { onChatMessagesReceived, onChatOnline, onChatOffline } from '../actions/chat';\nimport Header from '../components/Header';\n\nimport styles from '../components/main.module.css';\n\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n    this.userNameRef = React.createRef();\n  }\n\n  componentDidMount() {\n    document.addEventListener('DOMContentLoaded', () => {\n      if (!Notification) {\n        alert('Desktop notifications not available in your browser. Try Chromium.');\n        return;\n      }\n\n      if (Notification.permission !== 'granted') { Notification.requestPermission(); }\n    });\n\n\n    function notifyMe(data) {\n      if (Notification.permission !== 'granted') { Notification.requestPermission(); } else if (document.hidden) {\n        // eslint-disable-next-line no-new\n        new Notification(data.from, {\n          body: data.message,\n        });\n      }\n    }\n\n    const startSocket = () => {\n      this.socket = new WebSocket('ws://st-chat.shas.tel');\n      this.props.onChatOnline();\n      // global.SSS = this.socket;\n\n      this.socket.onmessage = (event) => {\n        const message = event.data;\n        const data = JSON.parse(message);\n        this.props.onChatMessagesReceived(data);\n        notifyMe(data[data.length - 1]);\n      };\n      this.socket.onclose = () => {\n        this.props.onChatOffline();\n        setTimeout(() => { startSocket(); }, 5000);\n      };\n    };\n    startSocket();\n\n\n    this.scrollToBottom();\n  }\n\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  // getUserNameFromLocalStorage = () => localStorage.getItem('userName');\n  getUserNameFromLocalStorage() {\n    return localStorage.getItem('userName');\n  }\n\n  // scrollToBottom = () => {\n  //   this.messagesEnd.scrollIntoView();\n  // }\n  scrollToBottom() {\n    this.messagesEnd.scrollIntoView();\n  }\n\n\n  sendMessageToServer() {\n    const mes = {message: this.inputRef.current.value, from: this.getUserNameFromLocalStorage()};\n    this.socket.send(JSON.stringify(mes));\n  }\n\n  render() {\n    return (\n      <>\n        <div className={styles.fullscreen}>\n          <Header\n            className={styles.headerClass}\n            isOnline={this.props.chat.isChatOnline}\n            getUserNameFromLocalStorage={this.getUserNameFromLocalStorage}\n            userNameRef={this.userNameRef}\n          />\n\n          <div className={styles.wrapmessages}>\n            <div className={styles.messages} id=\"messages\">\n              <div className={styles.headerMessages}>\n                {this.props.chat.messages.map((el) => {\n                  const timeFormat = new Date(el.time).toTimeString().replace(/ .*/, '');\n                  return (\n                    <div className={styles.messageContainer}>\n                      <div className={styles.messageFirstLine}>\n                        <div className={styles.messageFrom}>{el.from}</div>\n                        <div className={styles.messageTime}>{timeFormat}</div>\n                      </div>\n                      <div className={styles.messageSecondLine}>{el.message}</div>\n                    </div>\n                  );\n                })}\n\n                <div\n                  style={{ float: 'left', clear: 'both' }}\n                  ref={(el) => { this.messagesEnd = el; }}\n                />\n\n              </div>\n            </div>\n            <input\n              className={styles.messageBottom}\n              onKeyPress={(e) => {\n                if (e.key === 'Enter') {\n                  this.sendMessageToServer();\n                  this.inputRef.current.value = '';\n                }\n              }}\n              type=\"text\"\n              ref={this.inputRef}\n            />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    chat: state.chat,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onChatMessagesReceived: (data) => dispatch(onChatMessagesReceived(data)),\n    onChatOnline: (data) => dispatch(onChatOnline(data)),\n    onChatOffline: (data) => dispatch(onChatOffline(data)),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);\n","import React from 'react';\n\nimport Chat from './containers/Chat';\n\nfunction App() {\n  return (\n    <>\n      <Chat />\n    </>\n  );\n}\n\nexport default App;\n","import { ON_CHAT_MESSAGES_RECEIVED, ON_CHAT_ONLINE, ON_CHAT_OFFLINE } from '../actionTypes/chat';\n\nconst initialState = {\n  messages: [],\n  isChatOnline: false,\n};\n\n\nexport default function chat(state = initialState, action) {\n  switch (action.type) {\n  case ON_CHAT_MESSAGES_RECEIVED: {\n    const newState = { ...state};\n    // newState.messages = newState.messages.concat(action.payload);\n    newState.messages = newState.messages.concat(action.payload.reverse());\n    return newState;\n  }\n  case ON_CHAT_ONLINE: {\n    const newState = { ...state};\n    newState.messages = [];\n    newState.isChatOnline = true;\n    return newState;\n  }\n  case ON_CHAT_OFFLINE: {\n    const newState = { ...state};\n    newState.isChatOnline = false;\n    return newState;\n  }\n  default:\n    return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport chat from './chat';\n\nconst allReducers = combineReducers({\n  chat,\n});\n\nexport default allReducers;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles.css';\n\n\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport App from './App';\nimport allReducers from './reducers/allReducers';\n\n\nconst store = createStore(\n  allReducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}